// admin-auth/index.ts
import { serve } from "https://deno.land/std@0.200.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
const SUPABASE_URL = Deno.env.get("SUPABASE_URL");
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error("Falta SUPABASE_URL o SUPABASE_SERVICE_ROLE_KEY en las variables de entorno.");
  throw new Error("Variables de entorno no definidas");
}
// Cliente con la service key
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
// CORS headers
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type"
};
serve(async (req)=>{
  try {
    // Preflight CORS
    if (req.method === "OPTIONS") {
      return new Response("ok", {
        headers: corsHeaders
      });
    }
    if (req.method !== "POST") {
      return new Response(JSON.stringify({
        error: "Método no permitido"
      }), {
        status: 405,
        headers: corsHeaders
      });
    }
    // Leer body como texto para depurar
    const bodyText = await req.text();
    console.log("Body recibido:", bodyText);
    let jsonBody;
    try {
      jsonBody = JSON.parse(bodyText);
    } catch (err) {
      console.error("Error parseando JSON:", err);
      return new Response(JSON.stringify({
        error: "JSON inválido"
      }), {
        status: 400,
        headers: corsHeaders
      });
    }
    const { email, password, username } = jsonBody;
    if (!email || !password || !username) {
      return new Response(JSON.stringify({
        error: "Faltan parámetros"
      }), {
        status: 400,
        headers: corsHeaders
      });
    }
    // Crear usuario en Auth
    const { data: userData, error: userError } = await supabase.auth.admin.createUser({
      email,
      password,
      email_confirm: true
    });
    if (userError || !userData?.user) {
      console.error("Error creando usuario en Auth:", userError);
      return new Response(JSON.stringify({
        error: userError?.message || "Error creando usuario"
      }), {
        status: 500,
        headers: corsHeaders
      });
    }
    // Insertar en tabla profiles
    const { error: profileError } = await supabase.from("profiles").insert([
      {
        id: userData.user.id,
        username,
        role: "Usuario",
        supervisedUsers: [],
        lastActivity: new Date().toISOString(),
        email
      }
    ]);
    if (profileError) {
      console.error("Error insertando en profiles:", profileError);
      return new Response(JSON.stringify({
        error: profileError.message
      }), {
        status: 500,
        headers: corsHeaders
      });
    }
    console.log("Usuario creado correctamente:", username);
    return new Response(JSON.stringify({
      success: true,
      message: "Usuario creado correctamente",
      user: userData.user
    }), {
      status: 200,
      headers: corsHeaders
    });
  } catch (err) {
    console.error("Error inesperado:", err);
    return new Response(JSON.stringify({
      error: err.message || "Error inesperado"
    }), {
      status: 500,
      headers: corsHeaders
    });
  }
});
